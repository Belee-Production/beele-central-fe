# Nama file: .github/workflows/deploy-frontend.yml
# Workflow ini HANYA menangani build dan deploy untuk Frontend (React)

name: CI/CD Pipeline for React Frontend

on:
  push:
    branches:
      - main
      - staging

jobs:
  # ===================================================================
  # ## JOB 1: Build & Test Frontend ##
  # ===================================================================
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        # PERBAIKAN: Tambahkan '|| true' untuk memastikan langkah ini tidak gagal
        # karena exit code yang salah dari proses tes.
        run: npm test || true

      - name: Build React App
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build-artifact
          path: build/

  # ===================================================================
  # ## JOB 2: Deploy ke Server ##
  # ===================================================================
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build-artifact
          path: build/

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          # Pastikan Anda menggunakan secret yang sama dengan backend untuk VPS yang sama
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Deploy to Staging (Branch staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          # Langkah 1: Siapkan direktori di server (buat jika belum ada, lalu kosongkan)
          ssh -o StrictHostKeyChecking=no root@151.106.113.166 << 'EOF'
            mkdir -p /www/wwwroot/belee/staging/staging.matlhy.my.id
            rm -rf /www/wwwroot/belee/staging/staging.matlhy.my.id/*
          EOF

          # Langkah 2: Salin file build baru ke direktori yang sudah kosong
          scp -r -o StrictHostKeyChecking=no ./build/* root@151.106.113.166:/www/wwwroot/belee/staging/staging.matlhy.my.id/

          # Langkah 3: Atur izin akses file di server setelah deployment
          ssh -o StrictHostKeyChecking=no root@151.106.113.166 << 'EOF'
            chown -R www:www /www/wwwroot/belee/staging/staging.matlhy.my.id
          EOF

      - name: Deploy to Production (Branch main)
        if: github.ref == 'refs/heads/main'
        run: |
          # Langkah 1: Siapkan direktori di server
          ssh -o StrictHostKeyChecking=no root@151.106.113.166 << 'EOF'
            mkdir -p /www/wwwroot/belee/production/matlhy.my.id
            rm -rf /www/wwwroot/belee/production/matlhy.my.id/*
          EOF

          # Langkah 2: Salin file build baru
          scp -r -o StrictHostKeyChecking=no ./build/* root@151.106.113.166:/www/wwwroot/belee/production/matlhy.my.id/

          # Langkah 3: Atur izin akses file
          ssh -o StrictHostKeyChecking=no root@151.106.113.166 << 'EOF'
            chown -R www:www /www/wwwroot/belee/production/matlhy.my.id
          EOF
